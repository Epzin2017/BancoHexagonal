services:
  backend:
    image: demo/minibanco:latest
    ports:
      - "8081:8081"
    environment:
      DYNAMODB_ENDPOINT: http://dynamodb:8000
      AWS_ACCESS_KEY_ID: fakesenha
      AWS_SECRET_ACCESS_KEY: fakesenha
    depends_on:
      - dynamodb

  dynamodb:
    image: amazon/dynamodb-local
    container_name: dynamodb
    ports:
      - "8000:8000" # DynamoDB acessível externamente em http://localhost:8000
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb"]
    volumes:
      - ./dynamodb-data:/home/dynamodblocal/data # Persistência local dos dados do DynamoDB

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181" # Zookeeper acessível externamente em localhost:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # Kafka acessível externamente em localhost:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Configuração para conexões internas e externas
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080" # Interface gráfica Kafka UI acessível em http://localhost:8081
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

